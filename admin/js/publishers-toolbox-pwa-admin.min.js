/*! publishers-toolbox-pwa 16-07-2020 */

!function($) {
    "use strict";
    jQuery(document).ready(function() {
        jQuery(".publishers-toolbox-pwa .display_next").each(function() {
            var checkboxes = jQuery(this), actions = checkboxes.parent().next().next();
            checkboxes.is(":checked") ? (actions.show(), actions.removeClass("hidden-pwa")) : (actions.hide(), 
            actions.addClass("hidden-pwa")), checkboxes.on("click", function() {
                jQuery(this).parent().parent().toggleClass("no-margin-bottom"), checkboxes.is(":checked") ? (actions.show(), 
                actions.removeClass("hidden-pwa")) : (actions.hide(), actions.addClass("hidden-pwa"));
            });
        }), jQuery('.publishers-toolbox-pwa [class*="slider-pt-"]').each(function() {
            var currentSlider = jQuery(this);
            currentSlider.empty().slider({
                orientation: "horizontal",
                range: "max",
                step: currentSlider.prev().data("step"),
                min: currentSlider.prev().data("min"),
                max: currentSlider.prev().data("max"),
                value: currentSlider.prev().data("default"),
                animate: !0,
                slide: function(event, ui) {
                    currentSlider.prev().val(ui.value);
                },
                stop: function(event, ui) {
                    previewAdminData();
                }
            }), currentSlider.prev().val(currentSlider.slider("value"));
        }), jQuery('.publishers-toolbox-pwa [class*="sortable-pt-"]').each(function() {
            var $this = jQuery(this), optionTexts = [];
            jQuery(this).sortable({
                connectWith: ".list_sort",
                placeholder: "sortable-placeholder",
                stop: function(event, ui) {
                    $this.each(function() {
                        jQuery(this).find("li").each(function() {
                            var attrData = jQuery(this).data();
                            optionTexts[jQuery(this).index()] = {
                                id: attrData.id,
                                label: attrData.label,
                                link: attrData.link
                            };
                        });
                    }), $this.next().val(JSON.stringify(optionTexts)), previewAdminData();
                }
            }).disableSelection();
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .add_link", function() {
            var $this = jQuery(this), activeList = jQuery(".list_links_active"), indexList = jQuery(".list_links_active li").length, data = {}, optionTexts = [];
            jQuery($this.parent().parent().find("input")).each(function() {
                var fieldsObject = jQuery(this), fieldsValue = jQuery(this).val(), fieldIdName = fieldsObject.attr("id");
                if (fieldsObject.removeClass("is-success"), !fieldsValue) return fieldsObject.addClass("is-error"), 
                fieldsObject.focus(), !1;
                fieldsObject.removeClass("is-error"), data[fieldIdName] = fieldsValue, fieldsObject.val(""), 
                fieldsObject.addClass("is-success");
            }), data.link_url && data.link_title && (activeList.append('<li id="' + indexList + '" data-id="' + indexList + '" data-link="' + data.link_url + '" data-label="' + data.link_title + '">' + data.link_title + ' - <span class="link-in-list">' + data.link_url + '</span><span class="is-right remove_link dashicons dashicons-no-alt is-error"></span></li>'), 
            activeList.each(function() {
                jQuery(this).find("li").each(function() {
                    var attrData = jQuery(this).data(), attrId = jQuery(this).attr("id");
                    optionTexts[attrId] = {
                        id: attrId,
                        label: attrData.label,
                        link: attrData.link
                    };
                });
            })), activeList.next().val(JSON.stringify(optionTexts)), previewAdminData();
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .remove_link", function() {
            jQuery(this).parent().remove();
            var activeList = jQuery(".list_links_active"), optionTexts = [];
            activeList.each(function() {
                jQuery(this).find("li").each(function() {
                    var attrData = jQuery(this).data();
                    optionTexts[attrData.id] = {
                        id: attrData.id,
                        label: attrData.label,
                        link: attrData.link
                    };
                });
            });
            var filtered = optionTexts.filter(function(el) {
                return null != el;
            });
            activeList.next().val(JSON.stringify(filtered).toString());
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .notice-dismiss", function() {
            var data = {};
            data.action = jQuery(this).parent().data("action"), jQuery.post(pwaOptionsObject.ajax_url, {
                action: "notice_pwa_options_check",
                security: pwaOptionsObject._nonce,
                data: data
            });
        }), jQuery(document).on("click", ".pwa-send-push-notification", function(e) {
            e.preventDefault();
            var data = jQuery(this).data(), $this = jQuery(this);
            data.title = jQuery(".pwa-custom-fields #title").val(), data.message = jQuery(".pwa-custom-fields #message").val(), 
            data.image = jQuery(".pwa-custom-fields #image").prop("checked"), $this.prop("disabled", !0), 
            $this.parent().prev().prepend('<div class="loader-pwa"></div>'), jQuery.post(pwaOptionsObject.ajax_url, {
                action: "pwa_push_notification",
                security: pwaOptionsObject._nonce,
                data: data
            }, function(response) {
                jQuery(".loader-pwa").remove(), response.data && (jQuery(".pwa-sidebar-widget .notice-success.pwa-hidden").show(), 
                jQuery(".pwa-sidebar-widget .notice-error.pwa-hidden").hide()), response.data || (jQuery(".pwa-sidebar-widget .notice-error.pwa-hidden").show(), 
                jQuery(".pwa-sidebar-widget .notice-success.pwa-hidden").hide(), $this.prop("disabled", !1));
            });
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .pwa-layout", function() {
            jQuery(this).next().children("input").prop("checked", !0).change(), previewAdminData();
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .refresh", function() {
            var frame = jQuery("iframe");
            frame.attr("src", frame.attr("src"));
        }), jQuery(document).on("touchstart click", ".publishers-toolbox-pwa .accordion-init", function() {
            var clickPolice = !1, accordionContent = jQuery(".accordion-content");
            if (!clickPolice) {
                clickPolice = !0;
                var tabId = jQuery(this).attr("data-tab");
                jQuery(".tabs, .tab-content").removeClass("active"), jQuery("#" + tabId).addClass("active"), 
                jQuery(this).next().find("a").eq(0).addClass("active");
                var currIndex = jQuery(this).index(".accordion-init"), targetHeight = jQuery(".accordion-content-inner").eq(currIndex).outerHeight();
                jQuery(".accordion-init").removeClass("active"), jQuery(this).addClass("active"), 
                accordionContent.stop().animate({
                    height: 0
                }, 300), accordionContent.eq(currIndex).stop().animate({
                    height: targetHeight
                }, 300), setTimeout(function() {
                    clickPolice = !1;
                }, 300);
            }
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .tabs", function() {
            var tabId = jQuery(this).attr("data-tab");
            jQuery(".tabs, .tab-content").removeClass("active"), jQuery(this).addClass("active"), 
            jQuery("#" + tabId).addClass("active");
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .upload_image_button", function() {
            var send_attachment_bkp = wp.media.editor.send.attachment, button = jQuery(this);
            return wp.media.editor.send.attachment = function(props, attachment) {
                jQuery(button).parent().prev().find("img").attr("src", attachment.url), jQuery(button).prev().val(attachment.id), 
                wp.media.editor.send.attachment = send_attachment_bkp, previewAdminData();
            }, wp.media.editor.open(button), !1;
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .remove_image_button", function() {
            var $this = jQuery(this);
            return dialog.confirm({
                title: "Remove this logo?",
                message: "This will reset the image to the default one. Are you sure you want to continue?",
                cancel: "Cancel",
                button: "Accept",
                required: !0,
                callback: function(value) {
                    if (!0 === value) {
                        var placeholder = $this.parent().prev().find("img").attr("data-src");
                        $this.parent().prev().find("img").attr("src", placeholder), $this.prev().prev().val(""), 
                        previewAdminData();
                    }
                }
            }), !1;
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .activate-subscription", function(e) {
            e.preventDefault(), dialog.alert({
                title: "Checking Subscription.",
                message: "Please wait while we check your subscription details, this window will close automatically once the check has been completed.",
                required: !0
            }), jQuery.post(pwaOptionsObject.ajax_url, {
                action: "pwa_subscription_check",
                security: pwaOptionsObject._nonce,
                data: "subscription"
            }, function(response) {
                dialog.close(), response.data ? iziToast.success({
                    title: "Subscription Activated",
                    message: "Your subscription has been activated successfully!",
                    position: "topRight",
                    onClosing: function(instance, toast, closedBy) {
                        location.reload();
                    }
                }) : iziToast.error({
                    title: "Subscription Check Failed",
                    message: "Your subscription did not activate successfully!",
                    position: "topRight",
                    backgroundColor: ""
                });
            });
        }), jQuery.post(pwaOptionsObject.ajax_url, {
            action: "pwa_subscription_check",
            security: pwaOptionsObject._nonce,
            data: "heartbeat"
        }, function(response) {
            response.data && jQuery.post(pwaOptionsObject.ajax_url, {
                action: "pwa_subscription_check",
                security: pwaOptionsObject._nonce,
                data: "subscription"
            });
        }), jQuery(document).on("click", ".publishers-toolbox-pwa .card-header", function() {
            jQuery(this).toggleClass("tab-toggled"), jQuery(this).next().slideToggle();
        }), jQuery(document).on("submit", ".publishers-toolbox-pwa .plugin-options-form", function(e) {
            e.preventDefault();
            var data = {
                action: "save"
            };
            data.content = jQuery(".publishers-toolbox-pwa .plugin-options-form").serialize(), 
            jQuery.post(pwaOptionsObject.ajax_url, {
                action: "store_pwa_admin_options",
                security: pwaOptionsObject._nonce,
                data: data
            }, function(response) {
                response.success ? iziToast.success({
                    title: "Saved",
                    message: "Successfully saved settings.",
                    position: "topRight",
                    buttons: [ [ "<button>Refresh the page?</button>", function() {
                        location.reload();
                    }, !0 ] ]
                }) : iziToast.warning({
                    title: "No Changes?",
                    message: "No settings have changed!",
                    position: "topRight"
                });
            });
        }), jQuery(document).on("click", '.publishers-toolbox-pwa input[type="checkbox"], .publishers-toolbox-pwa input[type="radio"]', function() {
            previewAdminData();
        }), jQuery(document).on("change", '.publishers-toolbox-pwa select, .publishers-toolbox-pwa input[type="text"], .publishers-toolbox-pwa input[type="url"]', function() {
            previewAdminData();
        });
    }), jQuery(window).on("load", function() {
        previewAdminData();
    });
}(jQuery);

var sendMessage = function(theme) {
    if (theme.appPreview) {
        var themeString = JSON.stringify(theme);
        document.getElementById("pwa-preview-frame").contentWindow.postMessage(themeString, window.location.origin);
    }
    return !1;
};

function previewAdminData() {
    var data = {
        action: "preview"
    };
    data.content = jQuery(".publishers-toolbox-pwa .plugin-options-form").serialize(), 
    jQuery.post(pwaOptionsObject.ajax_url, {
        action: "store_pwa_admin_options",
        security: pwaOptionsObject._nonce,
        data: data
    }, function(response) {
        sendMessage(response.data.preview);
    });
}